{"version":3,"sources":["Components/Business.js","Components/BusinessList.js","Components/SearchBar.js","util/yelp.js","App.js","reportWebVitals.js","index.js"],"names":["Business","business","this","props","googleLink","name","city","className","href","url","src","imageSrc","alt","address","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","id","SearchBar","getSortByClass","sortByOption","sortBy","handleSortByChange","setState","term","location","searchYelp","handleTermChange","e","target","value","handleLocationChange","handleSearch","preventDefault","keyPressed","key","renderSortByOptions","Object","keys","sortByOptions","sortByOptionValue","onClick","bind","componentWillUnmount","onChange","placeholder","onKeyPress","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f795c53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        const business = this.props.business;\r\n        const googleLink = `https://www.google.com/maps/search/?api=1&query=${business.name}${business.city}`;\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a href={business.url}>\r\n                        <img src={business.imageSrc} alt=\"\" />\r\n                    </a>\r\n                </div>\r\n                <h2>\r\n                    <a href={googleLink}>{business.name}</a>\r\n                </h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{business.address}</p>\r\n                        <p>{business.city}</p>\r\n                        <p>\r\n                            {business.state} {business.zipCode}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{business.category}</h3>\r\n                        <h3 className=\"rating\">{business.rating}</h3>\r\n                        <p>{business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;\r\n","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"./Business\";\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {this.props.businesses.map((business) => {\r\n                    return <Business key={business.id} business={business} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: \"\",\r\n            location: \"\",\r\n            sortBy: \"best_match\",\r\n        };\r\n        //the 'sort by' options\r\n        this.sortByOptions = {\r\n            \"Best Match\": \"best_match\",\r\n            \"Highest Rated\": \"rating\",\r\n            \"Most Reviewed\": \"review_count\",\r\n        };\r\n        //bind this\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.keyPressed = this.keyPressed.bind(this);\r\n    }\r\n\r\n    //this method provides feedback to which 'sort by' has been selected by returning CSS class for a sorting option\r\n    getSortByClass = (sortByOption) => {\r\n        return this.state.sortBy === sortByOption ? \"active\" : \"\";\r\n    };\r\n\r\n    //this method sets the state of a sorting option when clicked. This method is tied to onClick of list item in renderSortByOptions\r\n    //added function to searchYelp if both input fields have been filled\r\n    handleSortByChange = (sortByOption) => {\r\n        this.setState({ sortBy: sortByOption });\r\n        if (this.state.term !== \"\" && this.state.location !== \"\") {\r\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        }\r\n    };\r\n\r\n    //accepts user input for \"Search Business\" and changes state for this.state.term\r\n    handleTermChange = (e) => {\r\n        this.setState({ term: e.target.value });\r\n    };\r\n\r\n    //accepts user input for \"where\" and changes state for this.state.location\r\n    handleLocationChange = (e) => {\r\n        this.setState({ location: e.target.value });\r\n    };\r\n\r\n    //runs the searchYelp method in App.js when button is clicked\r\n    handleSearch = (e) => {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n    };\r\n\r\n    //runs handleSearch when Enter is pressed on location input\r\n    keyPressed = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.handleSearch(e);\r\n        }\r\n    };\r\n\r\n    //this method renders the <li> list of 'sort by' options above the inputs\r\n    renderSortByOptions = () => {\r\n        return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return (\r\n                <li\r\n                    //onClick value needs to be binded to 'this' with bind() method.\r\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n                    className={this.getSortByClass(sortByOptionValue)}\r\n                    key={sortByOptionValue}\r\n                >\r\n                    {sortByOption}\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    componentWillUnmount = () => {\r\n        this.setState({ term: \"\", location: \"\" });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>{this.renderSortByOptions()}</ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" value={this.state.term} />\r\n                    <input\r\n                        onChange={this.handleLocationChange}\r\n                        onKeyPress={this.keyPressed}\r\n                        placeholder=\"Where?\"\r\n                        value={this.state.location}\r\n                    />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <button onClick={this.handleSearch}>Let's Go</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey =\r\n    \"Mu0hh-1a4vC7VhodH8jmQ0r5fdnIjR1ADm72FI_hVKv9QoYGvFw_O35xHPX54bSAv7hlu70I4H7r98H69ba2-J7nhJDhnSCKjRe3udeHNEO88Carh4xn5ObfEKF9YHYx\";\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(\r\n            `https://thingproxy.freeboard.io/fetch/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${apiKey}`,\r\n                },\r\n            }\r\n        )\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((jsonResponse) => {\r\n                if (jsonResponse.businesses) {\r\n                    console.log(jsonResponse.businesses);\r\n                    return jsonResponse.businesses.map((business) => {\r\n                        return {\r\n                            id: business.id,\r\n                            imageSrc: business.image_url,\r\n                            name: business.name,\r\n                            address: business.location.address1,\r\n                            city: business.location.city,\r\n                            state: business.location.state,\r\n                            zipCode: business.location.zip_code,\r\n                            category: business.categories.title,\r\n                            rating: business.rating,\r\n                            reviewCount: business.review_count,\r\n                            url: business.url,\r\n                        };\r\n                    });\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport BusinessList from \"./Components/BusinessList\";\r\nimport SearchBar from \"./Components/SearchBar\";\r\nimport Yelp from \"./util/yelp\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            businesses: [],\r\n        };\r\n\r\n        this.searchYelp = this.searchYelp.bind(this);\r\n    }\r\n\r\n    //runs ascyn request 'search' from Yelp.js then updates business state\r\n    searchYelp = (term, location, sortBy) => {\r\n        Yelp.search(term, location, sortBy).then((businesses) => {\r\n            this.setState({ businesses: businesses });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>hungry</h1>\r\n                <SearchBar searchYelp={this.searchYelp} />\r\n                <BusinessList businesses={this.state.businesses} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}